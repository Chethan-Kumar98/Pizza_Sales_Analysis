CREATE DATABASE PIZZA_SALES;
CREATE TABLE ORDERS(ORDER_ID INT PRIMARY KEY NOT NULL,ORDER_DATE DATE NOT NULL,ORDER_TIME TIME NOT NULL);
DESC ORDERS;
SELECT * FROM ORDERS;
CREATE TABLE ORDER_DETAILS(ORDER_DETAIL_ID INT PRIMARY KEY NOT NULL, 
                           ORDER_ID INT NOT NULL, 
                           PIZZA_ID TEXT NOT NULL, 
                           QUANTITY INT NOT NULL);
SELECT * FROM ORDER_DETAILS;
SELECT * FROM ORDERS;
SELECT * FROM PIZZA_TYPES;
SELECT * FROM PIZZAS;

-- RETIEVE THE TOTAL NUMBER ORDERS

SELECT COUNT(ORDER_ID) AS TOTAL_ORDERS FROM ORDERS;

-- CALCULATE THE TOTAL REVENUE GENERATED FROM PIZZA SALES

SELECT 
    ROUND(SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE),
            2) AS TOTAL_REVENUE
FROM
    ORDER_DETAILS
        INNER JOIN
    PIZZAS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID;

-- IDENTIFY THE HIGHEST PRICED PIZZA

SELECT 
    PIZZA_TYPES.NAME, PIZZAS.PRICE
FROM
    PIZZA_TYPES
        INNER JOIN
    PIZZAS ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZAS.PIZZA_TYPE_ID
WHERE
    PIZZAS.PRICE = (SELECT 
            MAX(PRICE)
        FROM
            PIZZAS);
            
-- IDENTIFY THE MOST COMMON PIZZA SIZE ORDERED

SELECT 
    PIZZAS.SIZE, COUNT(ORDER_DETAILS.ORDER_DETAIL_ID) AS ORDER_COUNT
FROM
    ORDER_DETAILS
        INNER JOIN
    PIZZAS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
GROUP BY PIZZAS.SIZE
ORDER BY ORDER_COUNT DESC
LIMIT 1; 

-- LIST THE TOP 5 MOST ORDERED PIZZAS ALONG WITH THEIR QUANTITIES

SELECT 
    A.PIZZA_ID, SUM(B.QUANTITY) AS QUANTITY
FROM
    PIZZAS AS A
        INNER JOIN
    ORDER_DETAILS AS B ON A.PIZZA_ID = B.PIZZA_ID
GROUP BY A.PIZZA_ID
ORDER BY QUANTITY DESC
LIMIT 5;

-- LIST THE TOP 5 MOST ORDERED PIZZAS TYPES ALONG WITH THEIR QUANTITIES

SELECT 
    PIZZA_TYPES.NAME, SUM(ORDER_DETAILS.QUANTITY) AS QUANTITY
FROM
    PIZZA_TYPES
        JOIN
    PIZZAS ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZAS.PIZZA_TYPE_ID
        JOIN
    ORDER_DETAILS ON PIZZAS.PIZZA_ID = ORDER_DETAILS.PIZZA_ID
GROUP BY PIZZA_TYPES.NAME
ORDER BY QUANTITY DESC
LIMIT 5;

-- JOIN THE NECESSARY TABLES TO FIND THE TOTAL QUQNTITY OF EACH PIZZA CATEGORY ORDERED

SELECT 
    PIZZA_TYPES.CATEGORY, SUM(ORDER_DETAILS.QUANTITY) AS QUANTITY
FROM
    PIZZA_TYPES
        JOIN
    PIZZAS ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZAS.PIZZA_TYPE_ID
        JOIN
    ORDER_DETAILS ON PIZZAS.PIZZA_ID = ORDER_DETAILS.PIZZA_ID
GROUP BY PIZZA_TYPES.CATEGORY
ORDER BY QUANTITY DESC;

-- DETERMINE THE DISTRIBUTION OF ORDERS BY HOUR OF THE DAY

SELECT 
    HOUR(ORDER_TIME) AS HOUR, COUNT(ORDER_ID) AS ORDERS
FROM
    ORDERS
GROUP BY HOUR(ORDER_TIME);

-- JOIN RELEVANT TABLES TO FIND THE CATEGORY WISE DISTRIBUTION OF PIZZAS

SELECT 
    CATEGORY, COUNT(NAME) AS TOTAL_PIZZAS
FROM
    PIZZA_TYPES
GROUP BY CATEGORY;

-- GROUP THE ORDERS BY DATE AND CALCULATE THE AVERAGE NUMBER OF PIZZAS ORDERED PER DAY

SELECT 
    ROUND(AVG(TOTAL_QUANTITY),0) AS AVERAGE
FROM
    (SELECT 
        ORDERS.ORDER_DATE,
            SUM(ORDER_DETAILS.QUANTITY) AS TOTAL_QUANTITY
    FROM
        ORDERS
    JOIN ORDER_DETAILS ON ORDERS.ORDER_ID = ORDER_DETAILS.ORDER_ID
    GROUP BY ORDERS.ORDER_DATE) AS A;
    
-- DETERMINE THE TOP 3 MOST ORDERED PIZZA TYPES BASED ON REVENUE

SELECT 
    PIZZA_TYPES.NAME,
    SUM(ORDER_DETAILS.QUANTITY) AS QUANTITY,
    SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE) AS REVENUE
FROM
    ORDER_DETAILS
        JOIN
    PIZZAS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
        JOIN
    PIZZA_TYPES ON PIZZAS.PIZZA_TYPE_ID = PIZZA_TYPES.PIZZA_TYPE_ID
GROUP BY PIZZA_TYPES.NAME
ORDER BY REVENUE DESC
LIMIT 3;

-- CALCULATE THE PERCENTAGE CONTRIBUTION OF EACH PIZZA TYPE TO TOTAL REVENUE
    
SELECT 
    PIZZA_TYPES.NAME,
    SUM(ORDER_DETAILS.QUANTITY) AS QUANTITY,
    SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE) AS REVENUE,
    CONCAT(ROUND((SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE) / (SELECT 
                            SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE)
                        FROM
                            ORDER_DETAILS
                                JOIN
                            PIZZAS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID) * 100),
                    2),
            '%') AS PERCENTAGE
FROM
    ORDER_DETAILS
        JOIN
    PIZZAS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
        JOIN
    PIZZA_TYPES ON PIZZAS.PIZZA_TYPE_ID = PIZZA_TYPES.PIZZA_TYPE_ID
GROUP BY PIZZA_TYPES.NAME
ORDER BY REVENUE DESC;

-- ANALYZE THE CUMULATIVE REVENUE GENERATED OVER TIME

SELECT 
       ORDER_DATE, SUM(REVENUE) OVER(ORDER BY ORDER_DATE) AS CUM_REVENUE 
FROM
    (
     SELECT ORDERS.ORDER_DATE, SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE) AS REVENUE 
     FROM 
         ORDER_DETAILS 
	 JOIN 
		 PIZZAS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID 
     JOIN 
         ORDERS ON ORDER_DETAILS.ORDER_ID=ORDERS.ORDER_ID 
GROUP BY ORDERS.ORDER_DATE) AS A;

-- DETERMINE THE TOP 3 MOST ORDERED PIZZA TYPES BASED ON REVENUE FOR EACH PIZZA CATEGORY

SELECT 
      CATEGORY,NAME, REVENUE 
      FROM 
          (SELECT CATEGORY, NAME, REVENUE, RANK() OVER (PARTITION BY CATEGORY ORDER BY REVENUE DESC) AS RNK 
	  FROM 
          (SELECT PIZZA_TYPES.CATEGORY,PIZZA_TYPES.NAME, SUM(ORDER_DETAILS.QUANTITY*PIZZAS.PRICE) AS REVENUE 
	  FROM
          ORDER_DETAILS 
          JOIN PIZZAS ON ORDER_DETAILS.PIZZA_ID=PIZZAS.PIZZA_ID 
          JOIN PIZZA_TYPES ON PIZZAS.PIZZA_TYPE_ID=PIZZA_TYPES.PIZZA_TYPE_ID
      GROUP BY PIZZA_TYPES.CATEGORY,PIZZA_TYPES.NAME) AS A) AS B 
WHERE RNK<=3;







